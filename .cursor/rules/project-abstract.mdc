---
alwaysApply: false
---

## Overview
[HSIFoodIngr-Compression](https://github.com/keitao7gawa/HSIFoodIngr-Compression) で生成した HDF5（例: `HSIFoodIngr-64.h5`）を、学習/解析で扱いやすくするためのツールキットです。

- PyTorch 用カスタム Dataset（lazy loading、チャネル順変換、正規化）
- HDF5 内容検証 CLI（構造・型・shape・値域・整合性）
- RGB/HSI/マスクの可視化 GUI（擬似カラー、分光プロファイル、凡例）

対象 HDF5 は上記リポジトリの出力仕様に準拠します。

---

## 1. 開発要件（必須）

### 1.1 HDF5 → PyTorch Dataset
- `HSIFoodIngrDataset` を提供し、インデックスで `hsi`, `rgb`, `mask`, `meta` を返却
- `__getitem__` は dict: `{ "hsi": Tensor, "rgb": Tensor, "mask": Tensor, "meta": dict }`
- テンソル仕様（PyTorch 規約）
  - `hsi`: `(B, H, W)` の `torch.float32`（元 `(H, W, B)` を変換）
  - `rgb`: `(3, H, W)` の `float32` または `uint8`（引数で切替）
  - `mask`: `(H, W)` の整数（`int64` 推奨）
- 正規化/前処理
  - `hsi`: none/min-max/standard/波長依存（オプション）
  - `rgb`: `0-255`→`0-1` 変換の有無を選択
- メタデータ: `ingredient_map`, `wavelengths`, `image_basenames`, `dish_labels`

### 1.2 検証 CLI
- 構造（必須キー）、dtype、shape、値域、整合性（`mask` ラベルと `ingredient_map`）
- 欠損/NaN/Inf、B と `wavelengths` 長の不一致、壊れた参照の検出
- 終了コード: OK=0, 警告=1, エラー=2

### 1.3 可視化 GUI
- サンプル/バンド/擬似カラー切替、`ingredient_map` によるマスク着色
- クリック座標の分光プロファイル（波長軸）表示
- 凡例、画像保存（任意）
- 推奨フレームワーク: Streamlit または Gradio

---

## 2. 実装計画

### 2.1 Dataset 実装
- 主要引数: `h5_path`, `normalize`, `return_uint8_rgb`, `transform`, `cache_metadata`
- I/O: `h5py` で lazy 読み。`DataLoader(num_workers>0)` 時はワーカー毎にファイルを開く
- 変換: HSI `(H,W,B)`→`(B,H,W)`, RGB `(H,W,3)`→`(3,H,W)`, Mask 整数化
- 例外: 範囲外 index、欠損キー、型/shape 不一致は詳細メッセージで送出

### 2.2 検証 CLI
- 例: `python -m hsifoodingr.tools.check_h5 path/to.h5 --strict --json report.json`
- 検証観点: 必須キー、shape、dtype、値域、整合性、NaN/Inf、N 件のスポットチェック

### 2.3 可視化 GUI
- 例: `streamlit run hsifoodingr/tools/view_hsi.py -- --h5 path/to.h5`
- 機能: サンプルスライダー、バンド/擬似カラー選択、マスク on/off、分光プロファイル

---

## 3. 受け入れ基準（DoD）
- Dataset が仕様どおりの I/F と形状/型を満たし、`DataLoader(num_workers∈{0,2,4})` で安定反復
- 検証 CLI が壊れたファイルで非 0、正常ファイルで 0 終了。JSON/人可読の両出力に対応
- GUI で RGB/HSI/Mask が整合表示され、分光プロファイルが正しく更新
- pytest による単体/統合テストが合格

---

## 4. ディレクトリ構成（案）
```
hsifoodingr-toolkit/
├── hsifoodingr/
│   ├── datasets/
│   │   └── hsi_food_ingr.py          # カスタム Dataset
│   └── tools/
│       ├── check_h5.py               # HDF5 検証 CLI
│       └── view_hsi.py               # 可視化 GUI
├── tests/
│   └── test_hsi_food_ingr.py         # Dataset/検証/GUI テスト
├── pyproject.toml or requirements.txt
└── README.md
```

---

## 5. テスト計画
- 単体: 形状/型/正規化/チャネル順、例外パス
- 統合: ダミー HDF5 で Dataset→検証→GUI 起動
- 性能: `num_workers` 別の I/O スループット、メモリ使用量

---

## 6. 性能/運用の注意
- `h5py` はプロセス間共有が非推奨。ワーカー毎に独立してオープン
- チャンク/圧縮に沿ったスライスで読み出し、不要コピーを回避（`torch.from_numpy`）
- ロギングで I/O エラーや遅延を計測

---

## 7. HDF5 仕様（想定）
- `/hsi`: float32 `(N,H,W,B)` 例 `(N,512,512,204)`
- `/rgb`: uint8 `(N,512,512,3)`
- `/masks`: 整数 `(N,512,512)`
- `/metadata/image_basenames`: vlen str `(N,)`
- `/metadata/dish_labels`: vlen str `(N,)`
- `/metadata/ingredient_map`: vlen str `(1,)`（JSON: id→name/color）
- `/metadata/wavelengths`: float32 `(B,)`

---

## 8. 非目標（Non-goals）
- 学習モデルの実装
- HDF5 の書き込み/編集（必要時に検討）

---

## 9. 依存関係（目安）
- Python 3.9+
- `torch`, `h5py`, `numpy`, `pillow`, `matplotlib`, `streamlit` or `gradio`, `pytest`
- 任意: `ruff`, `mypy`

---
